local whitelist = {
    [7108226671] = true,
    [2966200981] = true,
    [8330920857] = true,
    [1756500346] = true,
    [4975006716] = true,
    [9118652548] = true,
    [8126198790] = true,
    [9240147934] = true,
    [2664287139] = true,
    [7048987276] = true,
    [9229221610] = true,
}

local localPlayer = game:GetService("Players").LocalPlayer
if not whitelist[localPlayer.UserId] then
    localPlayer:Kick("ðŸš« You are not whitelisted!")
    return
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local musclelegendid = 3623096087

    if 
        game.PlaceId ~= musclelegendid 
    then
        game:GetService("Players").LocalPlayer:Kick("ðŸš« Wrong Place! Join the Muscle Legends.")
    else
        print("Place is right")
    end

    local Window = Fluent:CreateWindow({
            Title = "Zetka Hub | Paid Ver. " .. Fluent.Version,
            SubTitle = "by Zerquesth & Amigo & lzynoxx1337",
            TabWidth = 160,
            Size = UDim2.fromOffset(550, 320),
            Acrylic = true,
            Theme = "Dark",
            MinimizeKey = Enum.KeyCode.LeftControl
        })

        loadstring(game:HttpGet("https://pastefy.app/nWFRhL1s/raw"))()

game.Players.PlayerAdded:Connect(function(player)
    if not whitelist[player.UserId] then
        player:Kick("ðŸš« You are not whitelisted!")
    end
end)

local Tabs = {
    Credits = Window:AddTab({ Title = "Credits", Icon = "scroll" }),
    Main = Window:AddTab({ Title = "Main", Icon = "scan" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "bot" }),
    RebirthTab = Window:AddTab({ Title = "Rebirths", Icon = "refresh-ccw" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
    PaidTab = Window:AddTab({ Title = "Paid Tab", Icon = "gift-card" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "chevrons-down" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "menu" }),
    Rewards = Window:AddTab({ Title = "Rewards", Icon = "gem" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

Window:SelectTab(1)

local Options = Fluent.Options

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Fluent:Notify({
   Title = "Notification",
   Content = "https://discord.gg/dNkmRDGN6h",
   Duration = 6.5,
})

Fluent:Notify({
   Title = "WARNING",
   Content = "Inject keyboard script for toggle gui (LeftCtrl)",
   Duration = 15,
})

-- Information

local Section1 = Tabs.Credits:AddSection("Information")

Tabs.Credits:AddParagraph({
    Title = "Script made by Zerquesth & Amigo & lzynoxx1337",
})

Tabs.Credits:AddParagraph({
    Title = "zetka hub | paid version cost 350 rub / 500 rbx",
})

Tabs.Credits:AddParagraph({
    Title = "Join to my russian discord server!",
})

Tabs.Credits:AddButton({
    Title = "Click to Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.gg/dNkmRDGN6h")
        print("ðŸ“‹ Discord server link copied to clipboard!")
        Fluent:Notify({
        Title = "Notification",
        Content = "ðŸ“‹ Discord server link copied to clipboard!",
        Duration = 6.5,
        })
    end
})

-- Main Tab

local Section2 = Tabs.Main:AddSection("Main")

local Toggle2 = Tabs.RebirthTab:AddToggle("MyToggle", 
{
    Title = "Auto Normal Rebirth", 
    Default = false,
    Callback = function(state)
	autoRebirthEnabled = state
    
    if state then
        local player = game:GetService("Players").LocalPlayer
        local rebirthConnection
        local deathConnection

        local function doRebirth()
            if autoRebirthEnabled then
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
            end
        end

        rebirthConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if autoRebirthEnabled then
                doRebirth()
            end
        end)

        local function setupRespawn()
            if player.Character then
                deathConnection = player.Character.Humanoid.Died:Connect(function()
                    task.wait(0.5)
                    if autoRebirthEnabled then
                        rebirthConnection = game:GetService("RunService").Heartbeat:Connect(doRebirth)
                    end
                end)
            end
        end

        setupRespawn()
        player.CharacterAdded:Connect(setupRespawn)
        
    else
        if rebirthConnection then rebirthConnection:Disconnect() end
        if deathConnection then deathConnection:Disconnect() end
    end
end
})

local Toggle5 = Tabs.Main:AddToggle("MyToggle", 
{
    Title = "Auto Size 2", 
    Default = false,
    Callback = function(state)
	autoSizeEnabled = state
    
    if state then
        
        local player = game.Players.LocalPlayer
        local sizeLoop
        local deathConnection

        local function changeSize()
            while autoSizeEnabled do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
                task.wait()
            end
        end

        local function setupRespawn()
            if player.Character then
                deathConnection = player.Character.Humanoid.Died:Connect(function()
                    if sizeLoop then task.cancel(sizeLoop) end
                    task.wait(0.5)
                    if autoSizeEnabled then
                        sizeLoop = task.spawn(changeSize)
                    end
                end)
            end
        end

        sizeLoop = task.spawn(changeSize)
        setupRespawn()
        player.CharacterAdded:Connect(setupRespawn)
        
    else
        if sizeLoop then task.cancel(sizeLoop) end
        if deathConnection then deathConnection:Disconnect() end
    end
end
})

local targetCFrame = CFrame.new(-8747.04199, 121.162392, -5858.64014, 0.66414386, -4.84184497e-08, 0.747604787, 7.34292414e-08, 1, -4.67000827e-10, -0.747604787, 5.52062112e-08, 0.66414386)
local teleportActive = false
local teleportThread

local function teleportPlayer()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
    end
end

local function toggleTeleport()
    teleportActive = not teleportActive
    
    if teleportActive then
        teleportThread = coroutine.create(function()
            while teleportActive do
                teleportPlayer()
                wait(1)
            end
        end)
        coroutine.resume(teleportThread)
        
        game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
            if teleportActive then
                character:WaitForChild("HumanoidRootPart")
                teleportPlayer()
            end
        end)
    else
        if teleportThread then
            coroutine.close(teleportThread)
        end
    end
end

Tabs.Main:AddButton({
    Title = "Auto King",
    Callback = function()
     toggleTeleport() 
    end
})

local currentRebirthGoal = 0
local autoCheckEnabled = false
local checkConnection = nil

local function checkRebirths()
    if not autoCheckEnabled then return end
    
    local currentRebirths = game:GetService("Players").LocalPlayer.leaderstats.Rebirths.Value
    
    if currentRebirths >= currentRebirthGoal then
        print("Goal reached! Current rebirths:", currentRebirths)
        if checkConnection then
            checkConnection:Disconnect()
        end
        if Toggle2 then
            Toggle2:SetValue(false)
        checkAndDisableToggle()
        end
    else
        print("Progress:", currentRebirths.."/"..currentRebirthGoal)
    end
end

local Toggle27 = Tabs.RebirthTab:AddToggle("MyToggle", {
    Title = "Use Rebirth Goal", 
    Default = false,
    Callback = function(state)
        autoCheckEnabled = state
        
        if state then
            checkConnection = game:GetService("Players").LocalPlayer.leaderstats.Rebirths.Changed:Connect(function()
                checkRebirths()
            end)
            print("Auto-check ENABLED")
        else
            if checkConnection then
                checkConnection:Disconnect()
            end
            print("Auto-check DISABLED")
        end
    end
})

local function checkAndDisableToggle()
    if Toggle2.Value then
        print("Toggle2 was enabled - disabling")
        Toggle2:Set(false)
        Fluent:Notify({
            Title = "Notification",
            Content = "Auto Normal Rebirths was disabled!",
            Duration = 3
        })
    else
        print("Toggle2 arleady enabled")
    end
end

local Input3 = Tabs.RebirthTab:AddInput("Input", {
    Title = "Your rebirth goal",
    Placeholder = "Type Here!",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        currentRebirthGoal = tonumber(Value) or 0
        print("New rebirth goal set:", currentRebirthGoal)
    end
})

local Section3 = Tabs.Killer:AddSection("Kill Stuff")

local autoEquip = false
local connection = nil

local punchActive = false
local punchConnection = nil

local Toggle6 = Tabs.Killer:AddToggle("MyToggle", 
{
    Title = "Auto Normal Punch", 
    Default = false,
    Callback = function(state)
	punchActive = state
    
    if punchConnection then
        punchConnection:Disconnect()
        punchConnection = nil
    end
    
    if state then
        local player = game.Players.LocalPlayer
        
        local function startPunch()
            local char = player.Character or player.CharacterAdded:Wait()
            
            while punchActive and char and char:IsDescendantOf(workspace) do
                local punchTool = player.Backpack:FindFirstChild("Punch") or char:FindFirstChild("Punch")
                
                if punchTool then
                    if punchTool.Parent ~= char then
                        char:WaitForChild("Humanoid"):EquipTool(punchTool)
                        task.wait(0.1)
                    end
                    
                    punchTool:Activate()
                end
                task.wait(0.01)
            end
        end
        
        punchConnection = player.CharacterAdded:Connect(function()
            if punchActive then
                task.wait(0.5)
                startPunch()
            end
        end)
        
        startPunch()
    end 
end
})

local function attackPlayers()
    local player = game.Players.LocalPlayer
    
    local punch = player.Backpack:FindFirstChild("Punch") or (player.Character and player.Character:FindFirstChild("Punch"))
    if punch and punch:FindFirstChild("attackTime") then
        punch.attackTime.Value = 0.01
    end
    
    for _, target in ipairs(game.Players:GetPlayers()) do
        if target ~= player then
            local root = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
            local rHand = player.Character and player.Character:FindFirstChild("RightHand")
            local lHand = player.Character and player.Character:FindFirstChild("LeftHand")
            
 if root and rHand and lHand then
                firetouchinterest(rHand, root, 1)
                firetouchinterest(lHand, root, 1)
                firetouchinterest(rHand, root, 0)
                firetouchinterest(lHand, root, 0)
            end
        end
    end
end

local autoKill = false
local connection = nil

local Toggle7 = Tabs.Killer:AddToggle("MyToggle", 
{
    Title = "Auto Kill", 
    Default = false,
    Callback = function(state)
	autoKill = state
    
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    if state then
        connection = game:GetService("RunService").Heartbeat:Connect(attackPlayers)
        
        game.Players.LocalPlayer.CharacterAdded:Connect(function()
            if autoKill then
                task.wait(0.5)
                attackPlayers()
            end
        end)
    end
end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Equip Punch tool
local function equipTool(toolName)
    local character = LocalPlayer.Character
    local backpack = LocalPlayer.Backpack
    if not (character and backpack) then return end
    local tool = backpack:FindFirstChild(toolName)
    if tool then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:EquipTool(tool)
        end
    end
end

-- Evil Karma Kill function (targets players with more Evil Karma than Good Karma)
local function evilKarmaKill(toggleState)
    getgenv().killEvil = toggleState
    if toggleState then
        equipTool("Punch")
        task.spawn(function()
            while getgenv().killEvil do
                local character = LocalPlayer.Character
                local leftHand = character and character:FindFirstChild("LeftHand")
                if not leftHand then
                    task.wait(0.3)
                    continue
                end
                local muscleEvent = LocalPlayer:FindFirstChild("muscleEvent")
                if muscleEvent then
                    muscleEvent:FireServer("punch", "rightHand")
                    muscleEvent:FireServer("punch", "leftHand")
                end
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer then
                        local goodKarma = player:FindFirstChild("goodKarma")
                        local evilKarma = player:FindFirstChild("evilKarma")
                        if goodKarma and evilKarma and evilKarma.Value > goodKarma.Value then
                            local targetChar = player.Character
                            local head = targetChar and targetChar:FindFirstChild("Head")
                            if head then
                                head.CFrame = leftHand.CFrame
                                for _, part in pairs(targetChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name == "Handle" then
                                        part.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = targetChar:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
                task.wait(.1)
            end
        end)
    end
end

-- Good Karma Kill function (targets players with more Good Karma than Evil Karma)
local function goodKarmaKill(toggleState)
    getgenv().killGood = toggleState
    if toggleState then
        equipTool("Punch")
        task.spawn(function()
            while getgenv().killGood do
                local character = LocalPlayer.Character
                local leftHand = character and character:FindFirstChild("LeftHand")
                if not leftHand then
                    task.wait(0.3)
                    continue
                end
                local muscleEvent = LocalPlayer:FindFirstChild("muscleEvent")
                if muscleEvent then
                    muscleEvent:FireServer("punch", "rightHand")
                    muscleEvent:FireServer("punch", "leftHand")
                end
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer then
                        local goodKarma = player:FindFirstChild("goodKarma")
                        local evilKarma = player:FindFirstChild("evilKarma")
                        if goodKarma and evilKarma and goodKarma.Value > evilKarma.Value then
                            local targetChar = player.Character
                            local head = targetChar and targetChar:FindFirstChild("Head")
                            if head then
                                head.CFrame = leftHand.CFrame
                                for _, part in pairs(targetChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name == "Handle" then
                                        part.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = targetChar:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
                task.wait(.1)
            end
        end)
    end
end

local Toggle25 = Tabs.Killer:AddToggle("MyToggle", {
    Title = "Auto Good Karma",
    Default = false,
    Callback = function(state)
        evilKarmaKill(state)
        pcall(function()
            Fluent:Notify("Good Karma Kill " .. (state and "Enabled" or "Disabled"), 2)
        end)
    end
})

local Toggle26 = Tabs.Killer:AddToggle("MyToggle", {
    Title = "Auto Evil Karma",
    Default = false,
    Callback = function(state)
        goodKarmaKill(state)
        pcall(function()
            Fluent:Notify("Evil Karma Kill " .. (state and "Enabled" or "Disabled"), 2)
        end)
    end
})

local Section4 = Tabs.Killer:AddSection("Target")

local autoEquip = false
local punchActive = false
local punchConnection = nil
local autoKill = false
local killConnection = nil

local playerDropdown = Tabs.Killer:AddDropdown("PlayerDropdown", {
    Title = "Choose Player",
    Values = {},
    Multi = false,
    Default = nil,
})

local function updatePlayerList()
    local players = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(players, player.Name)
        end
    end
    playerDropdown:SetValues(players)
end

updatePlayerList()
game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)

local function attackSelectedPlayer()
    local selectedPlayerName = playerDropdown.Value
    if not selectedPlayerName then return end
    
    local player = game.Players.LocalPlayer
    local target = game.Players:FindFirstChild(selectedPlayerName)
    
    if not target or not target.Character then return end
    
    local punch = player.Backpack:FindFirstChild("Punch") or (player.Character and player.Character:FindFirstChild("Punch"))
    if punch then
        if punch.Parent ~= player.Character then
            player.Character:WaitForChild("Humanoid"):EquipTool(punch)
            task.wait(0.1)
        end
        
        if punch:FindFirstChild("attackTime") then
            punch.attackTime.Value = 0.01
        end
        
        local root = target.Character:FindFirstChild("HumanoidRootPart")
        local rHand = player.Character:FindFirstChild("RightHand")
        local lHand = player.Character:FindFirstChild("LeftHand")
        
        if root and rHand and lHand then
            firetouchinterest(rHand, root, 1)
            firetouchinterest(lHand, root, 1)
            firetouchinterest(rHand, root, 0)
            firetouchinterest(lHand, root, 0)
        end
    end
end

local Toggle = Tabs.Killer:AddToggle("AutoAttackToggle", {
    Title = "Auto Attack Selected Player",
    Default = false,
    Callback = function(state)
        punchActive = state
        autoKill = state
        
        if punchConnection then
            punchConnection:Disconnect()
            punchConnection = nil
        end
        
        if killConnection then
            killConnection:Disconnect()
            killConnection = nil
        end
        
        if state then
            punchConnection = game:GetService("RunService").Heartbeat:Connect(function()
                attackSelectedPlayer()
            end)
            
            killConnection = game.Players.LocalPlayer.CharacterAdded:Connect(function()
                if punchActive then
                    task.wait(0.5)
                    attackSelectedPlayer()
                end
            end)
        end
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local PlayerDropdown = Tabs.Killer:AddDropdown("PlayerSpyDropdown", {
    Title = "Choose player for spy",
    Values = {},
    Multi = false,
    Default = nil,
})

local SpyToggle = Tabs.Killer:AddToggle("SpyPlayerToggle", {
    Title = "Spy player",
    Default = false,
    Callback = function(state)
        spyActive = state
        
        if state then
            local targetName = PlayerDropdown.Value
            if not targetName then
                warn("âš ï¸ Choose player first!")
                SpyToggle:SetValue(false)
                return
            end
            
            local TargetPlayer = Players:FindFirstChild(targetName)
            if not TargetPlayer then
                warn("ðŸš¨ Player not found!")
                SpyToggle:SetValue(false)
                return
            end
            
            local function trackCharacter()
                if TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    Camera.CameraType = Enum.CameraType.Scriptable
                    Camera.CFrame = CFrame.new(
                        TargetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 3, -5),
                        TargetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 2, 0)
                    )
                end
            end
            
            spyConnection = game:GetService("RunService").Heartbeat:Connect(function()
                trackCharacter()
            end)
            
            characterConnection = TargetPlayer.CharacterAdded:Connect(function()
                task.wait(1)
                trackCharacter()
            end)
            
            if TargetPlayer.Character then
                trackCharacter()
            end
            
        else
            if spyConnection then spyConnection:Disconnect() end
            if characterConnection then characterConnection:Disconnect() end
            Camera.CameraType = Enum.CameraType.Custom
        end
    end
})

local function updatePlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    PlayerDropdown:SetValues(playerList)
end

updatePlayerList()
Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)

warn("â„¹ï¸ Select a player from the list and enable toggle for spying")

-- Paid Tab

local Section6 = Tabs.PaidTab:AddSection("Fast Stuff (Need 7 new packs)")

local isFarming = false

local Toggle9 = Tabs.PaidTab:AddToggle("MyToggle", 
{
    Title = "Fast Strength (Need 7 new packs)", 
    Default = false,
    Callback = function(state)
	if Value then
        k()
        isFarming = true

        task.spawn(function()
            while isFarming do
                for y = 1, 22 do
                    c.muscleEvent:FireServer("rep")
                end
                task.wait(0.001)
            end
        end)
    else
        isFarming = false
    end
end
})

local rebirthActive = false

local Toggle10 = Tabs.PaidTab:AddToggle("MyToggle", 
{
    Title = "Fast Rebirths (Need 7 new packs)", 
    Default = false,
    Callback = function(state)
	if state then
        if not rebirthActive then
            rebirthActive = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/0o0o0o0o0o0o0o0o0o0o0o0o/0o0o0o0o/refs/heads/main/Kk"))()
        end
    else
        if rebirthActive then
            rebirthActive = false
        end
    end
end
})

-- Glitching

local Section7 = Tabs.AutoFarm:AddSection("Rocks")

local player = game.Players.LocalPlayer

local function gettool()
    local tool = player.Backpack:FindFirstChild("Punch")
    if tool then
        tool.Parent = player.Character
    end
end

local function farmRocks(neededDurabilityValue)
    while getgenv().autoFarm do
        task.wait(.1)
        local character = player.Character

        if character and player.Durability.Value >= neededDurabilityValue then
            for _, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
                if v.Name == "neededDurability" and v.Value == neededDurabilityValue then
                    if character:FindFirstChild("LeftHand") and character:FindFirstChild("RightHand") then
                        firetouchinterest(v.Parent.Rock, character.RightHand, 0)
                        firetouchinterest(v.Parent.Rock, character.RightHand, 1)
                        firetouchinterest(v.Parent.Rock, character.LeftHand, 0)
                        firetouchinterest(v.Parent.Rock, character.LeftHand, 1)
                        gettool()
                    end
                end
            end
        end

        if _G.fastHitActive then
            player.muscleEvent:FireServer("punch", "rightHand")
            player.muscleEvent:FireServer("punch", "leftHand")
            local punchTool = character:FindFirstChild("Punch")
            if punchTool then
                punchTool:Activate()
            end
        end
    end
end

local rockOptions = {
    {
        Text = "Tiny Rock (0)",
        Value = 0,
        Desc = "Tiny Island Rock"
    },
    {
        Text = "Punching Rock (100)",
        Value = 100,
        Desc = "Starter Island Rock"
    },
    {
        Text = "Golden Rock (5000)",
        Value = 5000,
        Desc = "Legend Beach Rock"
    },
    {
        Text = "Frost Rock (150000)",
        Value = 150000,
        Desc = "Frost Gym Rock"
    },
    {
        Text = "Mystic Rock (400000)",
        Value = 400000,
        Desc = "Mythical Gym Rock"
    },
    {
        Text = "Eternal Rock (750000)",
        Value = 750000,
        Desc = "Eternal Gym Rock"
    },
    {
        Text = "Legend Rock (1000000)",
        Value = 1000000,
        Desc = "Legend Gym Rock"
    },
    {
        Text = "Muscle King Rock (5000000)",
        Value = 5000000,
        Desc = "Muscle King Gym Rock (Recommended size 5)"
    },
    {
        Text = "Jungle Rock (10000000)",
        Value = 10000000,
        Desc = "Ancient Jungle Rock"
    }
}

local selectedRockValue = 0
local Dropdown = Tabs.AutoFarm:AddDropdown("RockSelector", {
    Title = "Select Rock Type",
    Values = {"Tiny Rock (0)", "Punching Rock (100)", "Large Rock (5000)", "Frost Rock (150000)", "Mystic Rock (400000)", "Eternal Rock (750000)", "Legend Rock (1000000)", "Muscle King Rock (5000000)", "Jungle Rock (10000000)"},
    Multi = false,
    Default = "Tiny Rock (0)",
})

Dropdown:OnChanged(function(Value)
    for _, option in pairs(rockOptions) do
        if option.Text == Value then
            selectedRockValue = option.Value
            break
        end
    end
end)

local Toggle = Tabs.AutoFarm:AddToggle("AutoFarmToggle", {
    Title = "Auto Farm Rocks",
    Default = false,
    Callback = function(Value)
        getgenv().autoFarm = Value
        if Value then
            farmRocks(selectedRockValue)
        end
    end
})

local FastToggle = Tabs.AutoFarm:AddToggle("FastHitToggle", {
    Title = "Fast Hit Mode",
    Default = false,
    Callback = function(Value)
        _G.fastHitActive = Value
    end
})

local Section15 = Tabs.AutoFarm:AddSection("Auto Tools")

function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local Section8 = Tabs.PaidTab:AddSection("Buy pets (Coming soon...)")

-- Teleport

local Section9 = Tabs.Teleport:AddSection("Locations")

local TPDropdown = Tabs.Teleport:AddDropdown("Dropdown", {
    Title = "Choose location to TP",
    Values = {"Spawn", "Secret Island", "Tiny Island", "Frost Island", "Purple Island", "Eternal Island", "Legends Island", "Muscle King Island", "Jungle Island"},
    Multi = false,
    Default = 1,
})

TPDropdown:OnChanged(function(Value)
    local CFrameTable = {
        ["Spawn"] = CFrame.new(5.41369724, 7.32069302, 103.353584, 0.998408794, 1.33323566e-08, -0.0563899279, -1.14453016e-08, 1, 3.37873658e-08, 0.0563899279, -3.30882024e-08, 0.998408794),
        ["Secret Island"] = CFrame.new(1947, 1.7988528, 6191, 1, -1.38381895e-09, 2.73059163e-14, 1.38381895e-09, 1, -4.17202584e-09, -2.73001429e-14, 4.17202584e-09, 1),
        ["Tiny Island"] = CFrame.new(-33.9999962, 7.47380733, 1903, 1, -3.2191803e-08, 4.68168527e-13, 3.2191803e-08, 1, -9.70561231e-08, -4.65044127e-13, 9.70561231e-08, 1),
        ["Frost Island"] = CFrame.new(-2623.02222, 7.32069302, -409.073334, -1.37775425e-13, 2.1388237e-08, 1, 1.76718853e-08, 1, -2.1388237e-08, -1, 1.76718853e-08, -1.38153405e-13),
        ["Purple Island"] = CFrame.new(2316.8728, 7.32069254, 1083.15601, 0.356475145, -6.32208952e-08, -0.934304833, 9.51965546e-08, 1, -3.13448965e-08, 0.934304833, -7.77689237e-08, 0.356475145),
        ["Eternal Island"] = CFrame.new(-6758.96387, 7.32070589, -1284.9187, 3.68920965e-15, 3.28636962e-09, 1, 4.94521082e-08, 1, -3.28636962e-09, -1, 4.94521082e-08, 3.52669177e-15),
        ["Legends Island"] = CFrame.new(4603.28174, 991.49707, -3897.86572, -0.173624292, 5.4785918e-08, 0.984811962, 2.12412345e-08, 1, -5.18859693e-08, -0.984811962, 1.19099584e-08, -0.173624292),
        ["Muscle King Island"] = CFrame.new(-8748.88184, 27.2870579, -5857.51807, 0.979979336, 1.53297641e-08, 0.199099228, -9.27019528e-09, 1, -3.13670938e-08, -0.199099228, 2.88934139e-08, 0.979979336),
        ["Jungle Island"] = CFrame.new(-8685.62109, 6.74931479, 2392.32666, 4.55405274e-15, 6.11310058e-10, -1, -4.45797982e-10, 1, 6.11310058e-10, 1, 4.45797982e-10, 4.55432548e-15)
    }
    
    if CFrameTable[Value] then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrameTable[Value]
    end
end)

-- Misc

local Section10 = Tabs.Misc:AddSection("idk what to type here")

local Toggle21 = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Walk On Water", 
    Default = false,
    Callback = function(state)
	if state then
        local platform = Instance.new("Part")
        platform.Name = "FullMapPlatform"
        platform.Size = Vector3.new(50000, 10, 50000)
        platform.Position = Vector3.new(0, -10, 0)
        platform.Anchored = true
        platform.CanCollide = true
        platform.Transparency = 0.5
        platform.Parent = workspace
        getgenv().platform = platform
    else
        if getgenv().platform then
            getgenv().platform:Destroy()
            getgenv().platform = nil
        end
    end
end
})

local Toggle22 = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Lock Position", 
    Default = false,
    Callback = function(state)
	if state then
			local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
			getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
				if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
				end
			end)
		else
			if getgenv().posLock then
				getgenv().posLock:Disconnect()
			end
		end
	end
})

local Toggle23 = Tabs.Misc:AddToggle("MyToggle",
{
    Title = "Hide All Frames", 
    Default = false,
    Callback = function(state)
	if state then
        local sf = game.ReplicatedStorage:WaitForChild("strengthFrame")
        local af = game.ReplicatedStorage:WaitForChild("agilityFrame")
        local df = game.ReplicatedStorage:WaitForChild("durabilityFrame")
        local ekf = game.ReplicatedStorage:WaitForChild("evilKarmaFrame")
        local gkf = game.ReplicatedStorage:WaitForChild("goodKarmaFrame")
        local psif = game.ReplicatedStorage:WaitForChild("petShopItemFrame")
        local tf = game.ReplicatedStorage:WaitForChild("tokensFrame")
        sf.Visible = false
        af.Visible = false
        df.Visible = false
        ekf.Visible = false
        gkf.Visible = false
        psif.Visible = false
        tf.Visible = false
    else
        sf.Visible = true
        af.Visible = true
        df.Visible = true
        ekf.Visible = true
        gkf.Visible = true
        psif.Visible = true
        tf.Visible = true
    end
end
})

local Toggle24 = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Anti Lag", 
    Default = false,
    Callback = function(state)
	for _, v in pairs(game:GetDescendants()) do
			if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
				v.Enabled = false
			end
		end
		local lighting = game:GetService("Lighting")
		lighting.GlobalShadows = false
		lighting.FogEnd = 9e9
		for _, v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
				v.Material = Enum.Material.SmoothPlastic
				if v:IsA("Texture") then
					v:Destroy()
				end
			end
		end
		settings().Rendering.QualityLevel = 0
    end
})

Tabs.Misc:AddButton({
    Title = "Anti-AFK",
    Callback = function()
      loadstring(game:HttpGet("https://pastefy.app/ae6M4qA7/raw"))()  
    end
})

Tabs.Misc:AddButton({
    Title = "Left Control Button (for mobile players)",
    Callback = function()
      loadstring(game:HttpGet("https://pastefy.app/nWFRhL1s/raw"))()
    end 
})

Tabs.RebirthTab:AddButton({
    Title = "Rebirth Counter",
    Callback = function()
      loadstring(game:HttpGet("https://pastefy.app/9DljbUvT/raw"))()  
    end
})

Tabs.Misc:AddButton({
    Title = "Remove Add Portal",
    Callback = function()
      game.Players.LocalPlayer.adsAllowed.Value = false  
    end
})

Tabs.Misc:AddButton({
    Title = "Perm ShiftLock",
    Callback = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/MiniNoobie/ShiftLockx/main/Shiftlock-MiniNoobie"))()  
    end
})

Tabs.Misc:AddButton({
    Title = "Infinity Yield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/DarkNetworks/Infinite-Yield/main/latest.lua'))()
    end
})

local Dropdown = Tabs.Misc:AddDropdown("Dropdown", {
    Title = "Time Changer",
    Values = {"Day", "Morning", "Night"},
    Multi = false,
    Default = 1,
})

local Lighting = game:GetService("Lighting")
Dropdown:OnChanged(function(Value)
    if 
        Value == "Day" 
    then
        Lighting.ClockTime = 12
        Lighting.Ambient = Color3.fromRGB(0, 0, 0)
        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        Lighting.Brightness = 2
        Lighting.GlobalShadows = true
    end
    if
        Value == "Morning"
    then
        Lighting.ClockTime = 7
        Lighting.Ambient = Color3.fromRGB(255, 200, 128)
        Lighting.OutdoorAmbient = Color3.fromRGB(64, 64, 64)
        Lighting.Brightness = 2
        Lighting.GlobalShadows = true
    end
    if
        Value == "Night"
    then
        Lighting.ClockTime = 0
        Lighting.Ambient = Color3.fromRGB(25, 25, 40)
        Lighting.OutdoorAmbient = Color3.fromRGB(30, 30, 40)
        Lighting.Brightness = 1
        Lighting.GlobalShadows = true
    end
end)

local Toggle27 = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Disable Clouds", 
    Default = false,
    Callback = function(state)
    local player = game:GetService("Players").LocalPlayer  
    local playerScripts = player:WaitForChild("PlayerScripts") 
    local CloudRS = playerScripts:WaitForChild("cloudSpawnerScript")
	if state then
	    CloudRS.Enabled = false
	else
	    CloudRS.Enabled = true
    end
end
})

-- Player

Tabs.Player:AddParagraph({
    Title = "Reset your character to reset the speed and jump to default",
})

local Section11 = Tabs.Player:AddSection("Speed")

local Input3 = Tabs.Player:AddInput("Input", {
    Title = "Speed Changer",
    Placeholder = "16",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local newSpeed = tonumber(Value)
        if newSpeed and newSpeed > 0 then
            local humanoid = game.Players.LocalPlayer.Character.Humanoid
            if humanoid then
                humanoid.WalkSpeed = newSpeed
            end
        end
    end
})

local Section12 = Tabs.Player:AddSection("Jump")

local Input4 = Tabs.Player:AddInput("Input", {
    Title = "Jump Changer",
    Placeholder = "60",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local newJump = tonumber(Value)
        if newJump and newJump > 0 then
            local humanoid = game.Players.LocalPlayer.Character.Humanoid
            if humanoid then
                humanoid.JumpPower = newJump
            end
        end
    end
})

local Section14 = Tabs.Player:AddSection("Statistics")

local player = game.Players.LocalPlayer
local leaderstats = player:WaitForChild("leaderstats")

local StrengthDisplay = Tabs.Player:AddParagraph({ Title = "ðŸ’ª Strength: Loading..." })
local DurabilityDisplay = Tabs.Player:AddParagraph({ Title = "ðŸ‘Š Durability: Loading..." })
local AgilityDisplay = Tabs.Player:AddParagraph({ Title = "âš¡ Agility: Loading..." })
local RebirthsDisplay = Tabs.Player:AddParagraph({ Title = "â™»ï¸ Rebirths: Loading..." })
local KillsDisplay = Tabs.Player:AddParagraph({ Title = "ðŸ’€ Kills: Loading..." })
local BrawlsDisplay = Tabs.Player:AddParagraph({ Title = "âš”ï¸ Brawls: Loading..." })
local GemsDisplay = Tabs.Player:AddParagraph({ Title = "ðŸ’Ž Gems: Loading..." })
local EvilKarmaDisplay = Tabs.Player:AddParagraph({ Title = "ðŸ˜ˆ Evil Karma: Loading..." })
local GoodKarmaDisplay = Tabs.Player:AddParagraph({ Title = "ðŸ˜‡ Good Karma: Loading..." })

local function updateAllStats()
    local StrengthStat = leaderstats.Strength.Value
    local DurabilityStat = player.Durability.Value
    local AgilityStat = player.Agility.Value
    local RebirthsStat = leaderstats.Rebirths.Value
    local KillsStat = leaderstats.Kills.Value
    local BrawlsStat = leaderstats.Brawls.Value
    local GemsStat = player.Gems.Value 
    local EvilKarmaStat = player.evilKarma.Value
    local GoodKarmaStat = player.goodKarma.Value

    StrengthDisplay:SetTitle("ðŸ’ª Strength: " .. StrengthStat)
    DurabilityDisplay:SetTitle("ðŸ‘Š Durability: " .. DurabilityStat)
    AgilityDisplay:SetTitle("âš¡ Agility: " .. AgilityStat)
    RebirthsDisplay:SetTitle("â™»ï¸ Rebirths: " .. RebirthsStat)
    KillsDisplay:SetTitle("ðŸ’€ Kills: " .. KillsStat)
    BrawlsDisplay:SetTitle("âš”ï¸ Brawls: " .. BrawlsStat)
    GemsDisplay:SetTitle("ðŸ’Ž Gems: " .. GemsStat)
    EvilKarmaDisplay:SetTitle("ðŸ˜ˆ Evil Karma: " .. EvilKarmaStat)
    GoodKarmaDisplay:SetTitle("ðŸ˜‡ Good Karma: " .. GoodKarmaStat)
end

task.spawn(function()
    while task.wait(0.5) do
        updateAllStats()
    end
end)

-- Rewards

local Section13 = Tabs.Rewards:AddSection("Chests")

Tabs.Rewards:AddButton({
    Title = "Collect All Chests",
    Callback = function()
      --addfunc
    end
})

Tabs.Rewards:AddButton({
    Title = "Group Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(42.5453339, 22.33248997, 409.681732, -0.999961913, 8.30494074e-08, 0.00872769766, 8.27540632e-08, 1, -3.42005464e-08, -0.00872769766, -3.34769901e-08, -0.999961913)  
    end
})

Tabs.Rewards:AddButton({
    Title = "Golden Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-139.123825, 18.04949307, -276.161133, -0.974627078, 1.34631684e-08, -0.223834887, 2.57068375e-08, 1, -5.17855447e-08, 0.223834887, -5.62256801e-08, -0.974627078)  
    end
})

Tabs.Rewards:AddButton({
    Title = "Frozen Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2567.86353, 18.04949307, -554.752258, 0.993796587, -5.30253814e-08, -0.11121317, 5.55682327e-08, 1, 1.97651051e-08, 0.11121317, -2.58224127e-08, 0.993796587)  
    end
})

Tabs.Rewards:AddButton({
    Title = "Mythical Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2204.19092, 18.04949284, 911.59137, 0.908904672, 4.95325949e-08, -0.41700393, -4.26593942e-08, 1, 2.58013682e-08, 0.41700393, -5.66184921e-09, 0.908904672)  
    end
})

Tabs.Rewards:AddButton({
    Title = "Magma Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-6708.84717, 21.09898472, -1458.33423, -0.865200937, 3.876794e-08, 0.501425326, -1.25980453e-08, 1, -9.90531959e-08, -0.501425326, -9.20178991e-08, -0.865200937)  
    end
})

Tabs.Rewards:AddButton({
    Title = "Legends Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4674.06836, 1014.817566, -3689.24243, -0.464859813, -2.28780195e-08, -0.885384321, 3.51822855e-08, 1, -4.43116619e-08, 0.885384321, -5.17485539e-08, -0.464859813)  
    end
})

Tabs.Rewards:AddButton({
    Title = "Jungle Chest",
    Callback = function()
      game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-7916.94775, 18.06939006, 3013.45923, -0.675628722, 2.94962477e-09, -0.737242043, -1.91327798e-09, 1, 5.75427084e-09, 0.737242043, 5.29829958e-09, -0.675628722)  
    end
})

local toggleLoop = nil
local Toggle1 = Tabs.AutoFarm:AddToggle("MyToggle", 
{
    Title = "Auto Lift",
    Description = "Farm going forever",
    Default = false,
    Callback = function(state)
	if state then
        toggleLoop = task.spawn(function()
            while true do
                game.Players.LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                task.wait(0.1)
            end
        end)
    else
        if toggleLoop then
            task.cancel(toggleLoop)
            toggleLoop = nil
        end
    end
end
})

local ToolsDropdown = Tabs.AutoFarm:AddDropdown("Dropdown", {
    Title = "Choose tool for farm",
    Description = "To farm you need to enable Auto Lift",
    Values = {"None", "Weight", "Pushups", "Handstand", "Situps"},
    Multi = false,
    Default = 1,
})

local toolNames = {
    None = "Punch",
    Weight = "Weight",
    Pushups = "Pushups",
    Handstand = "Handstand", 
    Situps = "Situps"
}

local selectedTool = nil

local function getTool(toolName)
    local tool = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(toolName) or 
                 game:GetService("Players").LocalPlayer.Character:FindFirstChild(toolName)
    return tool
end

local function selectTool(toolName)
    local tool = getTool(toolName)
    if tool then
        selectedTool = tool
        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
        return true
    end
    return false
end

ToolsDropdown:OnChanged(function(Value)
    local toolName = toolNames[Value]
    if toolName then
        selectTool(toolName)
    end
end)

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    
    wait(2)
    
    if selectedTool then
        local toolName = selectedTool.Name
        selectTool(toolName)
    else
        local currentValue = ToolsDropdown.Value
        local toolName = toolNames[currentValue]
        if toolName then
            selectTool(toolName)
        end
    end
end)

local function monitorTool()
    while true do
        wait(1)
        if selectedTool and not selectedTool.Parent then
            local toolName = selectedTool.Name
            selectTool(toolName)
        end
    end
end

spawn(monitorTool)

wait(3)
local initialValue = ToolsDropdown.Value
local initialToolName = toolNames[initialValue]
if initialToolName then
    selectTool(initialToolName)
end

local Toggle28 = Tabs.AutoFarm:AddToggle("MyToggle", {
	Title = "Fast Tools",
	Default = false,
	Callback = function(Value)
		_G.FastTools = Value
		local defaultSpeeds = {
			{
				"Punch",
				"attackTime",
				Value and 0 or 0.1
			},
			{
				"Ground Slam",
				"attackTime",
				Value and 0 or 6
			},
			{
				"Stomp",
				"attackTime",
				Value and 0 or 7
			},
			{
				"Handstands",
				"repTime",
				Value and 0 or 1
			},
			{
				"Pushups",
				"repTime",
				Value and 0 or 1
			},
			{
				"Weight",
				"repTime",
				Value and 0 or 1
			},
			{
				"Situps",
				"repTime",
				Value and 0 or 1
			}
		}
		local player = game.Players.LocalPlayer
		local backpack = player:WaitForChild("Backpack")
		for _, toolInfo in ipairs(defaultSpeeds) do
			local tool = backpack:FindFirstChild(toolInfo[1])
			if tool and tool:FindFirstChild(toolInfo[2]) then
				tool[toolInfo[2]].Value = toolInfo[3]
			end
			local equippedTool = player.Character and player.Character:FindFirstChild(toolInfo[1])
			if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
				equippedTool[toolInfo[2]].Value = toolInfo[3]
			end
		end
	end
})

local Section = Tabs.AutoFarm:AddSection("Auto Gym")

local function E()
    local vim = game:GetService("VirtualInputManager")
    vim:SendKeyEvent(true, "E", false, game)
    task.wait(0.2)
    vim:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working and task.wait() do
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
    end
end

local function teleportAndStart(machineName, position)
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = position
        task.wait(0.2)
        E()
        autoLift()
    end
end

local activeWorkouts = {}

local locations = {
    ["Frost Gym"] = true,
    ["Mythical Gym"] = true,
    ["Eternal Gym"] = true,
    ["Legend Gym"] = true,
    ["Muscle King Gym"] = true,
    ["Jungle Gym"] = true
}

local locationsList = {
    "Frost Gym",
    "Mythical Gym",
    "Eternal Gym",
    "Legend Gym",
    "Muscle King Gym",
    "Jungle Gym"
}

local workoutPositions = {
    ["Bench Press"] = {
        ["Frost Gym"] = CFrame.new(-3009, 38, -338),
        ["Mythical Gym"] = CFrame.new(2369, 38, 1243),
        ["Eternal Gym"] = CFrame.new(-7174, 45, -1106),
        ["Legend Gym"] = CFrame.new(4109, 1020, -3803),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717),
        ["Jungle Gym"] = CFrame.new(-8629.88086, 64.8842468, 1855.03467)
    },
    ["Squat"] = {
        ["Frost Gym"] = CFrame.new(-2721, 29, -592),
        ["Mythical Gym"] = CFrame.new(2487, 30, 848),
        ["Legend Gym"] = CFrame.new(4304, 1020, -4123),
        ["Muscle King Gym"] = CFrame.new(-8759, 44, -6044),
        ["Jungle Gym"] = CFrame.new(-8374.25586, 34.5933418, 2932.44995)
    },
    ["Deadlift"] = {
        ["Frost Gym"] = CFrame.new(-2918, 40, -210),
        ["Mythical Gym"] = CFrame.new(2489.21484, 3.67686629, 849.051025),
        ["Legend Gym"] = CFrame.new(4532, 1023, -4003),
        ["Muscle King Gym"] = CFrame.new(-8773, 50, -5664),
        ["Jungle Gym"] = CFrame.new(-8678.05566, 14.5030098, 2089.25977)
    },
    ["Boulder"] = {
        ["Mythical Gym"] = CFrame.new(2667, 46, 1203),
        ["Legend Gym"] = CFrame.new(4189, 1010, -3904),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Jungle Gym"] = CFrame.new(-8617, 37, 2677)
    }
}

local workoutTypes = {
    "Bench Press",
    "Squat",
    "Deadlift",
    "Boulder"
}

local function resumeWorkAfterDeath()
    for workoutType, workoutData in pairs(activeWorkouts) do
        if workoutData.enabled then
            local selected = workoutData.location
            if workoutPositions[workoutType] and workoutPositions[workoutType][selected] then
                task.wait(3)
                teleportAndStart(workoutType, workoutPositions[workoutType][selected])
            end
        end
    end
end

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    
    task.wait(2)
    
    if next(activeWorkouts) ~= nil then
        resumeWorkAfterDeath()
    end
end)

for _, workoutType in ipairs(workoutTypes) do
    local dropdown = Tabs.AutoFarm:AddDropdown(workoutType .. " dropdown", {
        Title = "Choose " .. workoutType,
        Values = locationsList,
        Multi = false,
        Default = 1,
        Callback = function(Value)
            _G["select" .. string.lower(string.gsub(workoutType, " ", ""))] = Value
            
            if activeWorkouts[workoutType] then
                activeWorkouts[workoutType].location = Value
            end
        end
    })
    
    local toggle = Tabs.AutoFarm:AddToggle(workoutType .. " Toggle", {
        Title = "Farm " .. workoutType,
        Default = false,
        Callback = function(Value)
            getgenv().working = Value
            
            if Value then
                local selected = _G["select" .. string.lower(string.gsub(workoutType, " ", ""))] or locationsList[1]
                
                activeWorkouts[workoutType] = {
                    enabled = true,
                    location = selected
                }
                
                if workoutPositions[workoutType][selected] then
                    teleportAndStart(workoutType, workoutPositions[workoutType][selected])
                end
            else
                activeWorkouts[workoutType] = nil
            end
        end
    })
end

local function checkAndResumeWork()
    while true do
        task.wait(5)
        
        if next(activeWorkouts) ~= nil and not getgenv().working then
            getgenv().working = true
            resumeWorkAfterDeath()
        end
    end
end

spawn(checkAndResumeWork)
